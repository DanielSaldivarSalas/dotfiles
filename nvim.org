
#+DOWNLOADED: screenshot @ 2024-02-06 09:11:06
#+ATTR_ORG: :width 189711656512e00
[[file:img/2024-02-06_09-11-06_tmp.png]]


* Lazyvim start
https://www.lazyvim.org/installation

* keybindings

* Plugins
** transparent
#+begin_src lua :tangle ~/.dotfiles/.config/nvim/lua/plugins/transparent.lua :mkdirp yes
 
  local M = {}

  if vim.fn.has("unix") == 1 then -- Checks if the OS is Unix (or Unix-like) and not Windows
    table.insert(M, "xiyaowong/transparent.nvim")
  end
  return { M }

#+end_src

** treesitter
Note that Lazyvim already has treesitter but we want to add support to terraform and beancount
#+begin_src lua :tangle ~/.dotfiles/.config/nvim/lua/plugins/treesitter.lua :mkdirp yes
      return {
         "nvim-treesitter/nvim-treesitter",
         version = false, -- last release is way too old and doesn't work on Windows
         build = ":TSUpdate",
         event = { "BufReadPost", "BufNewFile" },
         dependencies = {
           {
             "nvim-treesitter/nvim-treesitter-textobjects",
             init = function()
               -- PERF: no need to load the plugin, if we only need its queries for mini.ai
               local plugin = require("lazy.core.config").spec.plugins["nvim-treesitter"]
               local opts = require("lazy.core.plugin").values(plugin, "opts", false)
               local enabled = false
               if opts.textobjects then
                 for _, mod in ipairs({ "move", "select", "swap", "lsp_interop" }) do
                   if opts.textobjects[mod] and opts.textobjects[mod].enable then
                     enabled = true
                     break
                   end
                 end
               end
               if not enabled then
                 require("lazy.core.loader").disable_rtp_plugin("nvim-treesitter-textobjects")
               end
             end,
           },
         },
         keys = {
           { "<c-space>", desc = "Increment selection" },
           { "<bs>", desc = "Decrement selection", mode = "x" },
         },
         ---@type TSConfig
         opts = {
           highlight = {
              enable = true,
              additional_vim_regex_highlighting = { 'org' },
           },
           indent = { enable = true },
           ensure_installed = {
             "bash",
             "beancount",
             "c",
             "html",
             "javascript",
             "json",
             "lua",
             "luadoc",
             "luap",
             "markdown",
             "markdown_inline",
             "python",
             "query",
             "terraform",
             "regex",
             "tsx",
             "org",
             "typescript",
             "vim",
             "vimdoc",
             "yaml",
           },
           incremental_selection = {
             enable = true,
             keymaps = {
               init_selection = "<C-space>",
               node_incremental = "<C-space>",
               scope_incremental = false,
               node_decremental = "<bs>",
             },
           },
         },
         ---@param opts TSConfig
         config = function(_, opts)
           if type(opts.ensure_installed) == "table" then
             ---@type table<string, boolean>
             local added = {}
             opts.ensure_installed = vim.tbl_filter(function(lang)
               if added[lang] then
                 return false
               end
               added[lang] = true
               return true
             end, opts.ensure_installed)
           end
           require("nvim-treesitter.configs").setup(opts)
         end,
       }
#+end_src

** Toggleterm
#+begin_src lua :tangle ~/.dotfiles/.config/nvim/lua/plugins/toggleterm.lua :mkdirp yes
        return
          {
              {'akinsho/toggleterm.nvim', version = "*", opts = {
                  direction = 'float'
           },
            keys = {
              { "<leader>tt", "<cmd>ToggleTerm size=40 dir=. direction=float<cr>"} --, desc = "Open a horizontal terminal at the Desktop directory" }
              },
           }
  }
#+end_src

#+RESULTS:

** neorg
#+begin_src lua :tangle ~/.dotfiles/.config/nvim/lua/plugins/neorg.lua :mkdirp yes
  return {
    {
      "nvim-neorg/neorg",
      dependencies = {
         { "nvim-lua/plenary.nvim" } ,
         { "laher/neorg-exec" }
      },
    --  keys = {
     -- { "<leader>ne", ":Neorg export to-file ", desc = "Export file" },
     -- { "<leader>nt", "<cmd>Neorg tangle current-file<cr>", desc = "Tangle file" },
    --  { "<leader>np", "<cmd>Neorg presenter<cr>", desc = "Presenter" },
     -- { "<leader>nmi", "<cmd>Neorg inject-metadata<cr>", desc = "Inject" },
    --  { "<leader>nmu", "<cmd>Neorg update-metadata<cr>", desc = "Update" },
     -- { "<leader>nol", "<cmd>Neorg toc left<cr>", desc = "Open ToC (left)" },
      --{ "<leader>nor", "<cmd>Neorg toc right<cr>", desc = "Open ToC (right)" },
     -- { "<leader>noq", "<cmd>Neorg toc qflist<cr>", desc = "Open ToC (quickfix list)" },
   -- },
    --build = ":Neorg sync-parsers",
      config = function()
      require("neorg").setup {
        load = {
          ["core.defaults"] = {}, -- Loads default behaviour
          ["core.concealer"] = {

            config = {
              icon_preset = "varied",
              icons = {
                todo = {

                  done = { icon = "✔" }, -- no extra wrapping bryyackets here
                },
              },
            },
          }, -- Adds pretty icons to your documents
          ["core.dirman"] = { -- Manages Neorg workspaces
            config = {
              workspaces = {
                notes = "~/notes",
                crm = "~/norg/crm",
              },
            },
          },
          ["core.looking-glass"] = {},
          ["external.exec"] = {},
          ["core.keybinds"] = {
             config = {
                default_keybinds = true,
                neorg_leader = " ",
                }
           --  config = {
             --   neorg_leader = ",",
    },
        },
      }
    end,
      }}
      --opts = {
       -- load = {

     --     ["core.defaults"] = {},

     --   ["core.journal"] = {
      --     config = {
      --        strategy = "flat",
      --     }
     --      },
     --     ["core.concealer"] = {
     --       config = {
     --         icon_preset = "varied",
     --         icons = {
     --           todo = {

     --             done = { icon = "✔" }, -- no extra wrapping bryyackets here
     --           },
     --         },
     --       },
     --     }, -- Adds pretty icons to your documents
     --     ["core.highlights"] = {},
    ---     ["core.looking-glass"] = {},
    --      ["core.keybinds"] = {
    --        config = {
        --      hook = function(keybinds)
                -- Binds the `gtd` key in `norg` mode to execute `:echo 'Hello'`
      --          keybinds.map("norg", "n", "gtd", "<cmd>echo 'Hello!'<CR>")
     --         end,
    --        },
    --      },
   --       ["core.dirman"] = {
   --         config = {
    --          workspaces = {
    --            notes = "~/notes", -- Format: <name_of_workspace> = <path_to_workspace_root>
    --            my_other_notes = "~/work/notes",
   --           },
   ---           default_workspace = "notes",
     --       },
    --        icons = {ddd
    --          todo = {
   --             done = { icon = "✔" }, -- no extra wrapping bryyackets here
  --            },
   --         },
     --     },
    --    },
   --   },
#+end_src

** vim-fugitive
#+begin_src lua :tangle ~/.dotfiles/.config/nvim/lua/plugins/vim-fugitive.lua :mkdirp yes
  return {
     "tpope/vim-fugitive",
   }
#+end_src

** lsp
*** Mason
#+begin_src lua :tangle ~/.dotfiles/.config/nvim/lua/plugins/mason.lua :mkdirp yes
  return {
    "williamboman/mason.nvim",
    cmd = "Mason",
    keys = { { "<leader>cm", "<cmd>Mason<cr>", desc = "Mason" } },
    opts = {
      ensure_installed = {
        "stylua",
        "shfmt",
      "emmet-ls",
      "cmake-language-server",
        -- "flake8",
      },
    },
    ---@param opts MasonSettings | {ensure_installed: string[]}
    config = function(_, opts)
      require("mason").setup(opts)
      local mr = require("mason-registry")
      local function ensure_installed()
        for _, tool in ipairs(opts.ensure_installed) do
          local p = mr.get_package(tool)
          if not p:is_installed() then
            p:install()
          end
        end
      end
      if mr.refresh then
        mr.refresh(ensure_installed)
      else
        ensure_installed()
      end
    end,
  }
#+end_src

*** nvim-lspconfig
Need this for emmet-ls
#+begin_src lua :tangle ~/.dotfiles/.config/nvim/lua/plugins/nvim-lspconfig.lua :mkdirp yes
return {
   {
      "neovim/nvim-lspconfig",
      ---@class PluginLspOpts
      opts = {
         ---@type lspconfig.options
         servers = {
            emmet_ls = {
               filetypes = { 'html', 'typescriptreact', 'javascriptreact', 'css', 'sass', 'scss', 'less', 'javascript', 'typescript', 'markdown' },
               init_options = {
                  html = {
                     options = {
                        -- For possible options, see: https://github.com/emmetio/emmet/blob/master/src/config.ts#L79-L26
                        ["bem.enabled"] = true,
                     },
                  },
               }
            },
         },
      },
   },
}
#+end_src


*** Lazygit
#+begin_src lua :tangle ~/.dotfiles/.config/nvim/lua/plugins/lazygit.lua :mkdirp yes
  return {
     {
       "kdheepak/lazygit.nvim",
       dependencies = {
            "nvim-lua/plenary.nvim",
        },
     }
  }
#+end_src
** telescope-makefile

#+begin_src lua :tangle ~/.dotfiles/.config/nvim/lua/plugins/telescope-makefile.lua :mkdirp yes
  return {
     "sopa0/telescope-makefile",
   }
#+end_src
* TODO Disabled plugins
#+begin_src lua :tangle ~/.dotfiles/.config/nvim/lua/plugins/disabled.lua :mkdirp yes
    -- disable trouble
    return {
  {
    "folke/noice.nvim",
    opts = {
      notify = {
        enabled = false,
      },
    },
  },
  { "rcarriga/nvim-notify", enabled = false },
}

#+end_src




#+DOWNLOADED: screenshot @ 2024-03-10 23:21:15
#+ATTR_ORG: :width 700
[[file:img/Disabled_plugins/2024-03-10_23-21-15_tmp.png]]
